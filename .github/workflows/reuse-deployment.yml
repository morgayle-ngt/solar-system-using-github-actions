name: Deployment - Reusable Workflow

on:
    workflow_call:
      inputs:
       mongodb-uri:
         required: true
         type: string
       kubectl-version:
         description: Provide the required kubectl version
         default: v1.26.0
         required: false
         type: string
       k8s-manifest-dir:
         description: Directory containing Kubernetes manifest files
         default: kubernetes/
         required: true
         type: string
       environment:
         description: Provide the Deployment Environment
         default: dev
         required: true
         type: string
      secrets:
        k8s-kubeconfig:
          required: true
        mongodb-password:
          required: true

jobs:
    reuse-deploy:
      environment:
        name: ${{ inputs.environment }}
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      outputs:
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: '${{ inputs.kubectl-version }}'

        - name: Set Kubeconfig
          uses: azure/k8s-set-context@v3
          with:
              method: kubeconfig
              kubeconfig: ${{ secrets.k8s-kubeconfig }}
              #context: <context name> # current-context from kubeconfig is used as default

        - name: Success Message
          if: success()
          run: echo "Dale! ✅"
  
        - name: Failure Message
          if: failure()
          run: echo "Kube just pooped on the floor 💩"    

        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short -o yaml
            echo -----------------------------------------------------
            kubectl get nodes

        - name: Save NGINX Ingress Controller IP as a GITHUB Environment Variable
          run: |
            echo "INGRESS_IP=$(kubectl get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

        - name: Replace Tokens in Manifest Files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["${{ inputs.k8s-manifest-dir }}*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
        
        - name: "🔍 Check files"
          run: |
            cat ${{ inputs.k8s-manifest-dir }}*.yaml

        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
              --from-literal=MONGO_URI=${{ inputs.mongo-uri }} \
              --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
              --from-literal=MONGO_PASSWORD=${{ secrets.mongodb-password }} \
              --save-config \
              --dry-run=client \
              -o yaml | kubectl apply -f -

        - name: "🐶 Deploy to Dev Env"
          run: |
            kubectl apply -f ${{ inputs.k8s-manifest-dir }}

        - name: Set App Ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> "$GITHUB_OUTPUT"

        - name: Success Message
          if: success()
          run: echo "Dale! ✅"
    
        - name: Failure Message
          if: failure()
          run: echo "Kube just pooped on the floor 💩"    

# This is a placeholder for production environment
    # reuse-deploy-production:
    #   environment:
    #     name: production
    #     url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    #   outputs:
    #     APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Checkout Repository
    #       uses: actions/checkout@v4

    #     - name: Install kubectl CLI
    #       uses: azure/setup-kubectl@v3
    #       with:
    #         version: 'v1.27.0'

    #     - name: Set KubeConfig
    #       uses: azure/k8s-set-context@v3
    #       with:
    #           method: kubeconfig
    #           kubeconfig: ${{ secrets.KUBECONFIG }}
    #           #context: <context name> # current-context from kubeconfig is used as default

    #     - name: Fetch Kubernetes Cluster Details
    #       run: |
    #         kubectl version --short -o yaml
    #         echo -----------------------------------------------------
    #         kubectl get nodes

    #     - name: Save NGINX Ingress Controller IP as a GITHUB Environment Variable
    #       run: |
    #         echo "INGRESS_IP=$(kubectl get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

    #     - name: Replace Tokens in Manifest Files
    #       uses: cschleiden/replace-tokens@v1
    #       with:
    #         tokenPrefix: '_{_'
    #         tokenSuffix: '_}_'
    #         files: '["kubernetes/production/*.yaml"]' #corrected
    #       env:
    #         NAMESPACE: ${{ vars.NAMESPACE }}
    #         REPLICAS: ${{ vars.REPLICAS }}
    #         IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
    #         INGRESS_IP: ${{ env.INGRESS_IP }}
        
    #     - name: "🔍 Check files"
    #       run: |
    #         cat kubernetes/production/*.yaml

    #     - name: Create MongoDB Secret
    #       run: |
    #         kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
    #           --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
    #           --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
    #           --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
    #           --save-config \
    #           --dry-run=client \
    #           -o yaml | kubectl apply -f -

    #     - name: "🐶 Deploy to Prod Env"
    #       run: |
    #         kubectl apply -f kubernetes/production

    #     - name: Set App Ingress Host URL
    #       id: set-ingress-host-address
    #       run: |
    #         echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> "$GITHUB_OUTPUT"

    #     - name: Success Message
    #       if: success()
    #       run: echo "Dale! ✅"
    
    #     - name: Failure Message
    #       if: failure()
    #       run: echo "Kube just pooped on the floor 💩"